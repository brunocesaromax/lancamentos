Formas de Data Binding:
-> Interpolação = {{name}}
-> Property Binding = [prop]="name"
-> Event Binding = (click)= "save()"
-> Two Way Data Binding = [(ngModel)]="name"

Variáveis de referência:
<input type="text" class=form-control" #inputName>

Tipos de diretivas:
- Componentes: <person-list><person-list/>
- Estruturais: <h2 *ngIf="logado">Olá {{userName}} </h2> (Manipula/Modifica o DOM)
- Atributos: Modifica o comportamento/aparência de um elemento no DOM.

Fazer property Binding em outros componentes, Comunicação entre os componentes:
- Usar @Input() Entrada
- @Output() Saída - eventos Ex: @Output() funcionarioAdd = new EventEmitter();

###############Estilização###############

Possível adicionar estilo CSS dentro do próprio componente com styles: []

Estilo CSS dinâmico com ngStyle:
1º [ngStyle]="{ 'background-color': 'red' }"
2º [ngStyle]="getCardStyle()"

Estilo CSS dinâmico com a diretiva ngClass:
1º [ngClass]="['badge', 'badge-default']"
2º [ngClass]="getClassListCss()"

Bibliotecas de componentes:
- Angular Material
- Angular Materialize
- ng-bootstrap
- ngx-bootstrap
- primeng

Instalações de dependências noprojeto:
$npm install primeng --save
$npm install fontawesome --save

Diretivas:
- criar: $ng g d 'directive-name'

Formulários:
1º Template-driven forms
2º Reactive forms (model-driven)
- <form #userForm="ngForm" (ngSubmit)="salvar(userForm)"

Adicionando mascara de numeros:
$    npm install ng2-currency-mask --save

Criando componente sem o html e o css
$  ng g c message --spec=false --inline-template --inline-style

Módulos em Angular:
- appmodule é o modulo raíz de toda aplicação
- São utilizados para guardar componentes, diretivas e pipes relacionados
- Pode se criar modulos utilitarios, modulos que contem ferramentas que podem
 ser utilizadas em várias partes do projeto angular
- Criar componentes dentro de submodulos basta colocar o path do modulo:
ng g c buttons/button-big --spec=false
- Para usar um componente interno de um módulo, basta nao exportar o mesmo
- Quando criar um módulo? Resposta: Funcionalidades relacionadas (Feature Modules)
- Elementos que vao ser usados na raiz da aplicação devem estar no coreModule

Serviços:
-> Def Uma funcionalidade em comum deve ser fornecida para vários componente ou
módulos
- Deixa os componentes mais limpos, evita duplicação de código e organiza melhor o
projeto em geral
- É nelas que ficam as regras de negócio
- ngOnInit e feita depois do construtor, construtor apenas para atribuições
- Problema de duas instâncias do mesmo serviço
- Por convenção deve-se colocar o @Injectable em todas as classes de serviço
do projeto
